type: edu
custom_name: stage4
files:
- name: src/blockchain/Main.java
  visible: true
  text: |
    package blockchain;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() < 12) {
                throw new BlockParseException("Every block should " +
                    "contain at least 12 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).startsWith("Id:")) {
                throw new BlockParseException("Third line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(2).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(3).startsWith("Timestamp:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(4).startsWith("Magic number:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(5).equals("Hash of the previous block:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(7).equals("Hash of the block:")) {
                throw new BlockParseException("8-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(6).strip();
            String hash = lines.get(8).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            if (!lines.get(9).startsWith("Block data:")) {
                throw new BlockParseException("10-th line of every block " +
                    "should start with \"Block data:\"");
            }

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<>(),
                new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 5) {
                return new CheckResult(false,
                    "You should output 5 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/blockchain/Blockchain.java
  visible: true
  text: |
    package blockchain;

    import java.io.Serializable;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Objects;

    public class Blockchain implements Serializable {
        private final List<Block> blocks;
        private Block firstBlock;
        private Block lastBlock;

        public Blockchain() {
            this.blocks = new ArrayList<>();
        }

        public List<Block> getBlocks() {
            return this.blocks;
        }

        public Block genBlock(int zeros) {
            Block newBlock = new Block(zeros);
            if (blocks.size() == 0) {
                newBlock.setPrevHash("0");
                this.firstBlock = newBlock;
            } else {
                newBlock.setPrevHash(lastBlock.getHash());
            }
            return newBlock;
        }

        public void addBlock(Block newBlock) {
            this.lastBlock = newBlock;
            blocks.add(newBlock);
        }

        public boolean validateBlockchain() {
            for (int i = 1; i < blocks.size(); i++) {
                if (!Objects.equals(blocks.get(i).getPrevHash(), blocks.get(i - 1).getHash())) {
                    return false;
                }
            }
            return true;
        }

        public int getNextId() {
            if (this.lastBlock == null) {
                return 1;
            } else {
                return lastBlock.getId() + 1;
            }
        }

        public Block getLastBlock() {
            return this.lastBlock;
        }
    }
  learner_created: true
- name: src/blockchain/Block.java
  visible: true
  text: |
    package blockchain;

    import java.io.Serializable;
    import java.util.Date;
    import java.security.MessageDigest;

    public class Block implements Serializable {
        private int id;
        private final long timeStamp;
        private final String hash;
        private String prevHash;
        private long magicNum;
        private long timeGenerating;
        private long minedBy;

        public Block(int zeros) {
            this.timeStamp = new Date().getTime();
            this.hash = generateHash(zeros);
            this.timeGenerating = new Date().getTime() - timeStamp;
        }

        public void setId(int id) {
            this.id = id;
        }

        public void setMinedBy(long minedBy) {
                this.minedBy = minedBy;
        }

        public long getTimeGenerating() {
            return this.timeGenerating;
        }

        public void setPrevHash(String prevHash) {
            this.prevHash = prevHash;
        }

        public String getPrevHash() {
            return this.prevHash;
        }

        public int getId() {
            return this.id;
        }

        public long getTimeStamp() {
            return this.timeStamp;
        }

        public String getHash() {
            return this.hash;
        }

        private String generateHash(int zeros) {
            magicNum = 0;
            String hashString = "";
            String newHash = "";
            boolean validHash = true;
            do {
                hashString = this.getId() + String.valueOf(this.getTimeStamp()) +
                        String.valueOf(magicNum) + prevHash;
                validHash = true;
                newHash = applySha256(hashString);
                for (int i = 0; i < zeros; i++) {
                    if (newHash.charAt(i) != '0') {
                        //System.out.println(newHash);
                        validHash = false;
                        break;
                    }
                }
                magicNum++;
            } while (!validHash);
            return newHash;
        }

        /* Applies Sha256 to a string and returns a hash. */
        public static String applySha256(String input){
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA-256");
                /* Applies sha256 to our input */
                byte[] hash = digest.digest(input.getBytes("UTF-8"));
                StringBuilder hexString = new StringBuilder();
                for (byte elem: hash) {
                    String hex = Integer.toHexString(0xff & elem);
                    if(hex.length() == 1) hexString.append('0');
                    hexString.append(hex);
                }
                return hexString.toString();
            }
            catch(Exception e) {
                throw new RuntimeException(e);
            }
        }

        @Override
        public String toString() {
            return "Block:\nCreated by miner # " + this.minedBy +
                    "\nId: " + this.id +
                    "\nTimestamp: " + this.timeStamp +
                    "\nMagic number: " + this.magicNum +
                    "\nHash of the previous block:\n" + this.prevHash +
                    "\nHash of the block:\n" + this.hash +
                    "\nBlock was generating for " + this.timeGenerating + " milliseconds";
        }
    }
  learner_created: true
- name: src/blockchain/MiningTask.java
  visible: true
  text: |-
    package blockchain;

    import java.util.concurrent.Callable;

    public class MiningTask implements Callable<Block> {
        private final Blockchain blockchain;
        private int zeros;

        public MiningTask(Blockchain blockchain, int zeros) {
            this.blockchain = blockchain;
            this.zeros = zeros;
        }

        @Override
        public Block call() throws Exception {
            Block newBlock = blockchain.genBlock(zeros);
            newBlock.setMinedBy(Thread.currentThread().getId());
            return newBlock;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5416#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 27 Sep 2021 12:59:44 UTC
record: 4
